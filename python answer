{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "68672b9b-dd88-467a-bc60-172995c1335c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number to find its factorial:  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The factorial of 5 is 120\n"
     ]
    }
   ],
   "source": [
    "def factorial_iterative(n):\n",
    "    if n < 0:\n",
    "        return \"Factorial is not defined for negative numbers.\"\n",
    "    result = 1\n",
    "    for i in range(1, n + 1):\n",
    "        result *= i\n",
    "    return result\n",
    "\n",
    "# Example usage:\n",
    "number = int(input(\"Enter a number to find its factorial: \"))\n",
    "print(f\"The factorial of {number} is {factorial_iterative(number)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4fc2695c-d5ec-4a64-83dc-3f7745a12405",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number to check if it is prime or composite:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 is a prime number.\n"
     ]
    }
   ],
   "source": [
    "def is_prime(number):\n",
    "    if number <= 1:\n",
    "        return False\n",
    "    if number <= 3:\n",
    "        return True\n",
    "    if number % 2 == 0 or number % 3 == 0:\n",
    "        return False\n",
    "    i = 5\n",
    "    while i * i <= number:\n",
    "        if number % i == 0 or number % (i + 2) == 0:\n",
    "            return False\n",
    "        i += 6\n",
    "    return True\n",
    "\n",
    "def main():\n",
    "    number = int(input(\"Enter a number to check if it is prime or composite: \"))\n",
    "    if number <= 1:\n",
    "        print(f\"{number} is neither prime nor composite.\")\n",
    "    elif is_prime(number):\n",
    "        print(f\"{number} is a prime number.\")\n",
    "    else:\n",
    "        print(f\"{number} is a composite number.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d5c4b33a-1ee1-4015-a4b7-32fe028d422c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string to check if it is a palindrome:  'satyam'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "''satyam'' is not a palindrome.\n"
     ]
    }
   ],
   "source": [
    "def is_palindrome(s):\n",
    "    # Remove non-alphanumeric characters and convert to lowercase\n",
    "    cleaned_string = ''.join(char.lower() for char in s if char.isalnum())\n",
    "    # Check if the cleaned string reads the same forwards and backwards\n",
    "    return cleaned_string == cleaned_string[::-1]\n",
    "\n",
    "def main():\n",
    "    input_string = input(\"Enter a string to check if it is a palindrome: \")\n",
    "    if is_palindrome(input_string):\n",
    "        print(f\"'{input_string}' is a palindrome.\")\n",
    "    else:\n",
    "        print(f\"'{input_string}' is not a palindrome.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7588594e-3deb-461d-bff0-0071d0de3ddb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the length of the first side:  2\n",
      "Enter the length of the second side:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The length of the third side is: 3.61\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def find_third_side(side1, side2):\n",
    "    # Determine which side is the hypotenuse\n",
    "    if side1 > side2:\n",
    "        hypotenuse = side1\n",
    "        leg = side2\n",
    "    else:\n",
    "        hypotenuse = side2\n",
    "        leg = side1\n",
    "\n",
    "    if hypotenuse**2 == leg**2:\n",
    "        # Case where the hypotenuse and leg are the same (not a valid right triangle case)\n",
    "        return \"The given sides cannot form a right-angled triangle.\"\n",
    "\n",
    "    # Calculate the third side\n",
    "    if hypotenuse**2 > leg**2:\n",
    "        # Side1 and Side2 are legs\n",
    "        return math.sqrt(hypotenuse**2 + leg**2)\n",
    "    else:\n",
    "        # One of Side1 or Side2 is the hypotenuse\n",
    "        return math.sqrt(hypotenuse**2 - leg**2)\n",
    "\n",
    "def main():\n",
    "    side1 = float(input(\"Enter the length of the first side: \"))\n",
    "    side2 = float(input(\"Enter the length of the second side: \"))\n",
    "\n",
    "    third_side = find_third_side(side1, side2)\n",
    "\n",
    "    if isinstance(third_side, str):\n",
    "        print(third_side)\n",
    "    else:\n",
    "        print(f\"The length of the third side is: {third_side:.2f}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bd6da425-3f81-4972-a4cc-826ba431df2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string:  satyam\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Character frequencies:\n",
      "'s': 1\n",
      "'a': 2\n",
      "'t': 1\n",
      "'y': 1\n",
      "'m': 1\n"
     ]
    }
   ],
   "source": [
    "def character_frequency(s):\n",
    "    # Create an empty dictionary to store frequency of each character\n",
    "    frequency = {}\n",
    "    \n",
    "    # Iterate through each character in the string\n",
    "    for char in s:\n",
    "        # If the character is already in the dictionary, increment its count\n",
    "        if char in frequency:\n",
    "            frequency[char] += 1\n",
    "        # If the character is not in the dictionary, add it with a count of 1\n",
    "        else:\n",
    "            frequency[char] = 1\n",
    "    \n",
    "    return frequency\n",
    "\n",
    "def main():\n",
    "    input_string = input(\"Enter a string: \")\n",
    "    \n",
    "    # Get the frequency of each character in the input string\n",
    "    freq_dict = character_frequency(input_string)\n",
    "    \n",
    "    # Print the frequency of each character\n",
    "    print(\"Character frequencies:\")\n",
    "    for char, count in freq_dict.items():\n",
    "        print(f\"'{char}': {count}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
